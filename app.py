import streamlit as st
from PIL import Image
import base64
import io
import pandas as pd
from src.pipeline import PlantDiseasePipeline

# Load the pipeline
pipeline = PlantDiseasePipeline()

# Language selection
lang = st.sidebar.selectbox("ЁЯМР Choose Language", ["English", "Bengali", "Hindi"])

translations = {
    "English": {
        "title": "Plant Disease Detection",
        "desc": "Upload a plant leaf image and get instant predictions with confidence scores.",
        "input": "Choose Input Method",
        "upload": "Upload an image",
        "photo": "Take a picture",
        "paste": "Paste Base64 image string",
        "prediction": "Prediction Result",
        "top5": "Top 5 Predictions",
        "history": "Recent Predictions",
        "tips": "Tips for Better Results",
        "tip_text": "- Use a high-quality image focused on one leaf\n- Avoid blur, glare, or background noise\n- Capture images in natural light\n- Upload a .jpg or .png format image"
    },
    "Bengali": {
        "title": "ржЧрж╛ржЫрзЗрж░ рж░рзЛржЧ рж╢ржирж╛ржХрждржХрж░ржг",
        "desc": "ржПржХржЯрж┐ ржЧрж╛ржЫрзЗрж░ ржкрж╛рждрж╛рж░ ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржи ржПржмржВ ржЖрждрзНржоржмрж┐рж╢рзНржмрж╛рж╕ рж╕рж╣ржХрж╛рж░рзЗ ржкрзВрж░рзНржмржнрж╛рж╕ ржкрж╛ржиред",
        "input": "ржЗржиржкрзБржЯ ржкржжрзНржзрждрж┐ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
        "upload": "ржПржХржЯрж┐ ржЫржмрж┐ ржЖржкрж▓рзЛржб ржХрж░рзБржи",
        "photo": "ржЫржмрж┐ рждрзБрж▓рзБржи",
        "paste": "Base64 ржЫржмрж┐ рж╕рзНржЯрзНрж░рж┐ржВ ржкрзЗрж╕рзНржЯ ржХрж░рзБржи",
        "prediction": "ржкрзВрж░рзНржмржнрж╛рж╕рзЗрж░ ржлрж▓рж╛ржлрж▓",
        "top5": "рж╢рзАрж░рзНрж╖ рзлржЯрж┐ ржкрзВрж░рзНржмржнрж╛рж╕",
        "history": "рж╕рж╛ржорзНржкрзНрж░рждрж┐ржХ ржкрзВрж░рзНржмржнрж╛рж╕",
        "tips": "ржнрж╛рж▓ ржлрж▓рж╛ржлрж▓рзЗрж░ ржЬржирзНржп ржЯрж┐ржкрж╕",
        "tip_text": "- ржПржХржЯрж┐ ржЙржЪрзНржЪржорж╛ржи ржорж╛ржирзЗрж░ ржЫржмрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи\n- ржкрзНрж░рждрж┐ржлрж▓ржи ржЕржмрж░ ржкрзГрж╖рзНржаржнрзВржорж┐ ржкрзГрж╖рзНржаржо ржПрзЬрж╛ржи\n- ржкрзНрж░рж╛ржХрзГрждрж┐ржХ ржЖрж▓рзЛрзЯрзЗ ржЫржмрж┐ рждрзБрж▓рзБржи\n- .jpg ржЕржержмрж╛ .png ржлрж░ржорзНржпрж╛ржЯрзЗ ржЖржкрж▓рзЛржб ржХрж░рзБржи"
    },
    "Hindi": {
        "title": "рдкреМрдзреЛрдВ рдХреЗ рд░реЛрдЧ рдХреА рдкрд╣рдЪрд╛рди",
        "desc": "рдкрддреНрддреЗ рдХреА рддрд╕реНрд╡реАрд░ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ рдФрд░ рд╡рд┐рд╢реНрд╡рд╛рд╕ рдХреЗ рд╕рд╛рде рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВред",
        "input": "рдЗрдирдкреБрдЯ рд╡рд┐рдзрд┐ рдЪреБрдиреЗрдВ",
        "upload": "рдЪрд┐рддреНрд░ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ",
        "photo": "рдлреЛрдЯреЛ рд▓реЗрдВ",
        "paste": "Base64 рдЫрд╡рд┐ рд╕реНрдЯреНрд░рд┐рдВрдЧ рдЪреИрдкрдХрд╛рд░ рдХрд░реЗрдВ",
        "prediction": "рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди рдкрд░рд┐рдгрд╛рдо",
        "top5": "рд╢реАрд░реНрд╖ 5 рднрд╡рд┐рд╖реНрдпрд╛рдиреНрдпрд╛рдВ",
        "history": "рд╣рд╛рд▓ рдХреА рднрд╡рд┐рд╖реНрдпрд╛рдиреНрдпрд╛рдВ",
        "tips": "рдмреЗрдЯрд░ рдкрд░рд┐рдгрд╛рдореЛрдВ рдХреЗ рд▓рд┐рдП рд╕реБрдЭрд╛рд╡",
        "tip_text": "- рдЙрдЪреНрдЪ рдЧреБрдгрд╡рддреНрддрд╛ рдХреА рдЫрд╡рд┐ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ\n- рдзреБрдВрдзрд▓реА рдпрд╛ рдЪрдордХрджрд╛рд░ рдкреГрд╖реНрдарднреВрдорд┐ рдкреГрд╖реНрдардо рд╕реЗ рдмрдЪреЗрдВ\n- рдкреНрд░рд╛рдХреГрддрд┐рдХ рдЪреИрд░ рдореЗрдВ рдЫрд╡рд┐ рдЦреАрдВрдЪреЗрдВ\n- .jpg рдпрд╛ .png рдлрд╛рд░реНрдореИрдЯ рдореЗрдВ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ"
    }
}

T = translations[lang]

st.markdown(f"""
    <div style="text-align:center;">
        <h1 style="color:#2E8B57;">{T['title']}</h1>
        <p style="font-size:18px;">{T['desc']}</p>
    </div>
""", unsafe_allow_html=True)

# Input method
method = st.radio(T['input'], [f"ЁЯУБ {T['upload']}", f"ЁЯУ╖ {T['photo']}", f"ЁЯЦЛ {T['paste']}"], horizontal=True)

image = None
if method.startswith("ЁЯУБ"):
    uploaded_file = st.file_uploader(T['upload'], type=["jpg", "jpeg", "png"])
    if uploaded_file:
        image = Image.open(uploaded_file)

elif method.startswith("ЁЯУ╖"):
    camera_image = st.camera_input(T['photo'])
    if camera_image:
        image = Image.open(camera_image)

elif method.startswith("ЁЯЦЛ"):
    base64_input = st.text_area(T['paste'])
    if base64_input:
        try:
            decoded = base64.b64decode(base64_input)
            image = Image.open(io.BytesIO(decoded))
        except Exception:
            st.error("Invalid Base64 image string.")
col1, col2 = st.columns([1, 2])

if image is not None:
    col1.image(image, caption="Uploaded Leaf", use_column_width=True)

    result = pipeline.run(image)

    col2.subheader(f"ЁЯй║ {T['prediction']}")
    col2.markdown(f"<h3 style='color:#006400;'>тЬЕ {result['label']}</h3>", unsafe_allow_html=True)
    col2.markdown(f"<p style='font-size:16px;'>Confidence: <strong>{result['confidence']*100:.2f}%</strong></p>", unsafe_allow_html=True)

    top_5_df = pd.DataFrame.from_dict(result['top_5'], orient='index', columns=['Probability'])
    col2.markdown(f"### ЁЯФН {T['top5']}")
    col2.bar_chart(top_5_df)

    # Save prediction history
    if 'history' not in st.session_state:
        st.session_state.history = []
    st.session_state.history.append((result['label'], round(result['confidence'] * 100, 2)))
with st.sidebar:
    st.markdown(f"### ЁЯХУ {T['history']}")
    if 'history' in st.session_state:
        for i, (label, conf) in enumerate(st.session_state.history[-5:], 1):
            st.markdown(f"**{i}. {label}** тАФ {conf}%")
    st.markdown("---")
    with st.expander("ЁЯУМ " + T['tips']):
        st.write(T['tip_text'])
    st.info("This app uses a deep learning CNN model trained on augmented plant disease data.")